group_by(tourney_id,name) %>%
summarise(winning_count = n(), .groups = 'drop') %>%
right_join(t1,by=tourney_id)
t1 = matches %>%
reframe(
name = setdiff(unique(winner_name), unique(loser_name)),
.by = tourney_id
)
t2 = matches %>%
mutate(name = winner_name) %>%
group_by(tourney_id,name) %>%
summarise(winning_count = n(), .groups = 'drop') %>%
right_join(t1,by=c(tourney_id,name)
t2
t1 = matches %>%
reframe(
name = setdiff(unique(winner_name), unique(loser_name)),
.by = tourney_id
)
t2 = matches %>%
mutate(name = winner_name) %>%
group_by(tourney_id,name) %>%
summarise(winning_count = n(), .groups = 'drop') %>%
right_join(t1,by=c(tourney_id,name))
champions = matches %>%
reframe(
name = setdiff(unique(winner_name), unique(loser_name)),
.by = tourney_id
)
t2 = champions %>%
left_join(matches, by = c("tourney_id", "name" = "winner_name")) %>%
count(tourney_id, name, name = "winning_count") %>%
arrange(tourney_id, desc(winning_count))
t2
champions = matches %>%
reframe(
name = setdiff(unique(winner_name), unique(loser_name)),
.by = tourney_id
)
t2 = champions %>%
left_join(matches, by = c("tourney_id", "name" = "winner_name")) %>%
group_by(tourney_id,name) %>%
summarise(winning_count = n()) %>%
arrange(tourney_id, desc(winning_count))
t2
champions = matches %>%
reframe(
name = setdiff(unique(winner_name), unique(loser_name)),
.by = tourney_id
)
t2 = champions %>%
left_join(matches, by = c("tourney_id", "name" = "winner_name")) %>%
group_by(tourney_id,name) %>%
summarise(winning_count = n(),.groups = 'drop_last') %>%
slice_max(winning_count) %>%
arrange(tourney_id, desc(winning_count))
t2
champions = matches %>%
reframe(
name = setdiff(unique(winner_name), unique(loser_name)),
.by = tourney_id
)
t2 = champions %>%
left_join(matches, by = c("tourney_id", "name" = "winner_name")) %>%
group_by(tourney_id,name) %>%
summarise(winning_count = n(),.groups = 'drop_last') %>%
slice_max(winning_count,with_ties = FALSE) %>%
arrange(tourney_id, desc(winning_count))
t2
t2 = matches %>%
filter(match_num == 300) %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop')
t2 = matches %>%
filter(match_num == 300) %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop')
t2
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop')
t2
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup()
t2
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop')
t2
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop') %>%
filter(winning_count > 1)
t2
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop') %>%
filter(winning_count > 1) %>%
arrange(desc(winning_count))
t2
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop') %>%
filter(winning_count > 1) %>%
arrange(desc(winning_count))
nrow(t2)
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop') %>%
filter(winning_count > 1) %>%
arrange(desc(winning_count))
nrow(t2)
t2
aces = matches %>%
select(w_ace,l_ace) %>%
pivot_longer(
cols = c(winner_aces, loser_aces),
names_to = "result",
values_to = "aces")
aces = matches %>%
select(w_ace,l_ace) %>%
pivot_longer(
cols = c(w_ace, l_ace),
names_to = "result",
values_to = "aces")
View(aces)
aces = matches %>%
select(w_ace,l_ace) %>%
pivot_longer(
cols = c(w_ace, l_ace),
names_to = "result",
values_to = "aces")
test_result <- aces %>%
specify(aces ~ result) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("w_ace", "l_ace"))
install.packages("infer")
library(infer)
aces = matches %>%
select(w_ace,l_ace) %>%
pivot_longer(
cols = c(w_ace, l_ace),
names_to = "result",
values_to = "aces")
test_result <- aces %>%
specify(aces ~ result) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("w_ace", "l_ace"))
library(infer)
aces = matches %>%
select(w_ace,l_ace) %>%
pivot_longer(
cols = c(w_ace, l_ace),
names_to = "result",
values_to = "aces")
test_result <- aces %>%
specify(aces ~ result) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("w_ace", "l_ace"))
View(test_result)
library(infer)
aces = matches %>%
select(w_ace,l_ace) %>%
pivot_longer(
cols = c(w_ace, l_ace),
names_to = "result",
values_to = "aces")
test_result <- aces %>%
specify(aces ~ result) %>%
hypothesize(null = "independence") %>%
calculate(stat = "t", order = c("w_ace", "l_ace"))
test_result
t3 = matches %>%
drop_na(w_ace,l_ace) %>%
mutate(diff = w_ace-l_ace) %>%
t3 = matches %>%
drop_na(w_ace,l_ace) %>%
mutate(diff = w_ace-l_ace)
t3 = matches %>%
drop_na(w_ace,l_ace) %>%
mutate(diff = w_ace-l_ace) %>%
summarise(t = sqrt(n())*mean(diff)/sd(diff))
t3 = matches %>%
drop_na(w_ace,l_ace) %>%
mutate(diff = w_ace-l_ace) %>%
summarise(t = sqrt(n())*mean(diff)/sd(diff))
t3
t4 = matches %>%
group_by(name = winner_name)
summary(win_cnt = n())
t4 = matches %>%
group_by(name = winner_name) %>%
summary(win_cnt = n())
t4 = matches %>%
select(winner_name, loser_name) %>%
pivot_longer(
cols =  c(win = winner_name,lose = loser_name),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summary(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5)
t4 = matches %>%
select(win=winner_name, lose=loser_name) %>%
pivot_longer(
cols =  c(win,lose),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5)
t4 = matches %>%
select(win=winner_name, lose=loser_name) %>%
pivot_longer(
cols =  c(win,lose),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5)
t4
t4 = matches %>%
select(win=winner_name, lose=loser_name) %>%
pivot_longer(
cols =  c(win,lose),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5) %>%
slice_max(win_rate)
t4
t4 = matches %>%
select(win=winner_name, lose=loser_name) %>%
pivot_longer(
cols =  c(win,lose),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5) %>%
slice_max(win_rate,with_ties = TRUE)
t4
library(nzelect)
library(tidyverse)
head(nzge)
table1 = nzge %>%
group_by(election_year, voting_type) %>%
summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(total_votes))
table1
table2 = nzge %>%
filter(election_year == 2014, voting_type == "Candidate") %>%
group_by(party) %>%
summarise(vote_count = sum(votes, na.rm = TRUE), .groups = "drop") %>%
mutate(prop = round(vote_count/sum(vote_count)*100,2)) %>%
select(party, prop) %>%
arrange(desc(prop))
table2
winnings = nzge %>%
group_by(election_year, voting_type, party) %>%
summarise(votes = sum(votes, na.rm = TRUE), .groups = "drop_last") %>%
slice_max(votes, n = 1, with_ties = FALSE) %>%
ungroup() %>%
select(election_year, voting_type, party)
table3 = winnings %>%
pivot_wider(names_from = voting_type, values_from = party) %>%
arrange(election_year)
table3
matches = read.table("atp_matches_2019.txt", header = TRUE,
sep = ",",quote = "",fill = TRUE)
head(matches)
matches %>%
summarize(total_tournament_count = n_distinct(tourney_name))
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop') %>%
filter(winning_count > 1) %>%
arrange(desc(winning_count))
nrow(t2)
t2
t3 = matches %>%
drop_na(w_ace,l_ace) %>%
mutate(diff = w_ace-l_ace) %>%
summarise(t = sqrt(n())*mean(diff)/sd(diff))
t3
t4 = matches %>%
select(win=winner_name, lose=loser_name) %>%
pivot_longer(
cols =  c(win,lose),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5) %>%
slice_max(win_rate,with_ties = TRUE)
t4
library(nzelect)
library(tidyverse)
head(nzge)
table1 = nzge %>%
group_by(election_year, voting_type) %>%
summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(total_votes))
table1
table2 = nzge %>%
filter(election_year == 2014, voting_type == "Candidate") %>%
group_by(party) %>%
summarise(vote_count = sum(votes, na.rm = TRUE), .groups = "drop") %>%
mutate(prop = round(vote_count/sum(vote_count)*100,2)) %>%
select(party, prop) %>%
arrange(desc(prop))
table2
winnings = nzge %>%
group_by(election_year, voting_type, party) %>%
summarise(votes = sum(votes, na.rm = TRUE), .groups = "drop_last") %>%
slice_max(votes, n = 1, with_ties = FALSE) %>%
ungroup() %>%
select(election_year, voting_type, party)
table3 = winnings %>%
pivot_wider(names_from = voting_type, values_from = party) %>%
arrange(election_year)
table3
matches = read.table("atp_matches_2019.txt", header = TRUE,
sep = ",",quote = "",fill = TRUE)
head(matches)
matches %>%
summarize(total_tournament_count = n_distinct(tourney_name))
t2 = matches %>%
group_by(tourney_id) %>%
slice_max(match_num) %>%
ungroup() %>%
select(tourney_id,winner_name) %>%
group_by(winner_name) %>%
summarise(winning_count = n(),.groups = 'drop') %>%
filter(winning_count > 1) %>%
arrange(desc(winning_count))
nrow(t2)
t2
t3 = matches %>%
drop_na(w_ace,l_ace) %>%
mutate(diff = w_ace-l_ace) %>%
summarise(t = sqrt(n())*mean(diff)/sd(diff))
t3
t4 = matches %>%
select(win=winner_name, lose=loser_name) %>%
pivot_longer(
cols =  c(win,lose),
names_to = "result",
values_to = "name"
) %>%
group_by(name) %>%
summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
lose_cnt = sum(ifelse(result == 'lose',1,0)),
total_cnt = n(),
win_rate = win_cnt/total_cnt,
.groups = 'drop') %>%
filter(total_cnt>=5) %>%
slice_max(win_rate,with_ties = TRUE)
t4
covid = read.table("us-state.txt", header = TRUE,
sep = ",",quote = "",fill = TRUE)
covid = read.table("us-states.txt", header = TRUE,
sep = ",",quote = "",fill = TRUE)
head(covid)
View(covid)
covid = read.table("us-states.txt", header = TRUE,
sep = ",",quote = "",fill = TRUE)
covid$date = as.Date(covid$date)
head(covid)
daily_total_case = covid %>%
group_by(date) %>%
summarise(total_case = sum(cases))
ggplot(daily_total_case, aes(x = date, y = total_case)) +
geom_line(color = "steelblue", linewidth = 1) +
labs(
title = "Daily Total Case Number",
x = "Date",
y = "Case Number"
) +
theme_minimal()
overall_rates = covid %>%
group_by(state) %>%
summarise(overall_case_rate = mean(cases_avg_per_100k),
overall_death_rate = mean(deaths_avg_per_100k))
View(overall_rates)
overall_rates = covid %>%
group_by(state) %>%
summarise(overall_case_rate = mean(cases_avg_per_100k)) %>%
ungroup()
overall_rates = covid %>%
group_by(state) %>%
summarise(overall_case_rate = mean(cases_avg_per_100k)) %>%
ungroup()
overall_rates %>% slice_max(overall_case_rate)
overall_rates = covid %>%
group_by(state) %>%
summarise(overall_case_rate = mean(cases_avg_per_100k)) %>%
ungroup()
overall_rates %>% slice_max(overall_case_rate)
overall_rates %>% slice_min(overall_case_rate)
t1 = covid %>%
select(date, state, cases_avg_per_100k) %>%
filter(state == 'American Samoa' | state == 'Maryland')
ggplot(t1, aes(x = date, y = cases_avg_per_100k, color = state)) +
geom_line(\linewidth = 1) +
t1 = covid %>%
select(date, state, cases_avg_per_100k) %>%
filter(state == 'American Samoa' | state == 'Maryland')
ggplot(t1, aes(x = date, y = cases_avg_per_100k, color = state)) +
geom_line(linewidth = 1) +
labs(
title = "Daily Case per Population",
x = "Date",
y = "Case per 100k Population"
) +
theme_minimal()
overall_rates = covid %>%
group_by(state) %>%
summarise(overall_case_rate = sum(cases_avg_per_100k)) %>%
ungroup()
overall_rates %>% slice_max(overall_case_rate)
overall_rates %>% slice_min(overall_case_rate)
t1 = covid %>%
select(date, state, cases_avg_per_100k) %>%
filter(state == 'Rhode Island' | state == 'Maine')
ggplot(t1, aes(x = date, y = cases_avg_per_100k, color = state)) +
geom_line(linewidth = 1) +
labs(
title = "Daily Case per Population",
x = "Date",
y = "Case per 100k Population"
) +
theme_minimal()
covid %>%
filter(cases_avg_per_100k > 5) %>%
arrange(date)
covid %>%
filter(cases_avg_per_100k > 5) %>%
arrange(date)
covid %>%
filter(cases_avg_per_100k > 10) %>%
arrange(date)
first_over_10 = covid %>%
filter(!is.na(cases_avg_per_100k)) %>%
group_by(state) %>%
summarise(first_date_over10 = min(date[cases_avg_per_100k > 10], na.rm = TRUE),
.groups = "drop") %>%
arrange(first_date_over10)
head(first_over_10, 5)
