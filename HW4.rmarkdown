---
title: "HW4"
format: pdf
editor: visual
---



## Github link

<https://github.com/SONG-Yunqi/STATS-506-HW4>

## Question 1

### (a)



```{r}
library(nzelect)
library(tidyverse)
```

```{r}
head(nzge)
```

```{r}
table1 = nzge %>%
  group_by(election_year, voting_type) %>%
  summarise(total_votes = sum(votes, na.rm = TRUE), .groups = "drop") %>%
  arrange(desc(total_votes))

```

```{r}
table1
```



### (b)



```{r}
table2 = nzge %>%
  filter(election_year == 2014, voting_type == "Candidate") %>%
  group_by(party) %>%
  summarise(vote_count = sum(votes, na.rm = TRUE), .groups = "drop") %>%
  mutate(prop = round(vote_count/sum(vote_count)*100,2)) %>%
  select(party, prop) %>%
  arrange(desc(prop))
```

```{r}
table2
```



### (c)



```{r}
winnings = nzge %>%
  group_by(election_year, voting_type, party) %>%
  summarise(votes = sum(votes, na.rm = TRUE), .groups = "drop_last") %>%
  slice_max(votes, n = 1, with_ties = FALSE) %>%   
  ungroup() %>%
  select(election_year, voting_type, party)

table3 = winnings %>%
  pivot_wider(names_from = voting_type, values_from = party) %>%
  arrange(election_year)
```

```{r}
table3
```



## Question 2



```{r}
matches = read.table("atp_matches_2019.txt", header = TRUE, 
                     sep = ",",quote = "",fill = TRUE)
head(matches)
```



### (a)

Here I just assume all matches take place in 2018 are parts of tourney ending in 2019.



```{r}
matches %>%
  summarize(total_tournament_count = n_distinct(tourney_name))

```



There are 128 tournaments in 2019.

### (b)

For each tournament, the last match was the one with biggest match_num. So the tournament winner should be the winner of the last match.



```{r}
t2 = matches %>% 
  group_by(tourney_id) %>%
  slice_max(match_num) %>%
  ungroup() %>%
  select(tourney_id,winner_name) %>%
  group_by(winner_name) %>%
  summarise(winning_count = n(),.groups = 'drop') %>%
  filter(winning_count > 1) %>%
  arrange(desc(winning_count))

nrow(t2)
t2
```



There are 17 players who won more than 1 tournament. The most winning player won 9 tournaments.

### (c)

We use a one-side paired t-test to solve this question. For each match, we will compute diff = w_ace - l_ace. Then we will test whether the mean of diff is 0. If a match has missing w_ace or l_ace, we just remove that match.



```{r}
t3 = matches %>%
  drop_na(w_ace,l_ace) %>%
  mutate(diff = w_ace-l_ace) %>%
  summarise(t = sqrt(n())*mean(diff)/sd(diff))

t3
```



We see the observed t-statistic is greater than 1.64. Then we have strong evidence that the winner ace is greater than the loser ace.

### (d)



```{r}
t4 = matches %>%
  select(win=winner_name, lose=loser_name) %>%
  pivot_longer(
    cols =  c(win,lose),
    names_to = "result",
    values_to = "name"
  ) %>%
  group_by(name) %>%
  summarise(win_cnt = sum(ifelse(result == 'win',1,0)),
          lose_cnt = sum(ifelse(result == 'lose',1,0)),
          total_cnt = n(),
          win_rate = win_cnt/total_cnt,
          .groups = 'drop') %>%
  filter(total_cnt>=5) %>%
  slice_max(win_rate,with_ties = TRUE)
  
t4
```



Rafael Nadal has the highest winning rate.

## Question 3

### (a)



```{r}
covid = read.table("us-states.txt", header = TRUE, 
                     sep = ",",quote = "",fill = TRUE)
covid$date = as.Date(covid$date)
head(covid)
```



We get the daily total case numbers in the US and plot a time series line chart.



```{r}
daily_total_case = covid %>%
  group_by(date) %>%
  summarise(total_case = sum(cases))

ggplot(daily_total_case, aes(x = date, y = total_case)) +
  geom_line(color = "steelblue", linewidth = 1) +
  labs(
    title = "Daily Total Case Number",
    x = "Date",
    y = "Case Number"
  ) +
  theme_minimal()
```



We can see there were 4 minor spikes (around the end of 2021, around 2021-08, around 2022-06, around the end of 2023). There was one major spike, which was at the beginning of 2022.

### (b)

We first find the states with the highest and lowest overall rate per population.



```{r}
overall_rates = covid %>%
  group_by(state) %>%
  summarise(overall_case_rate = sum(cases_avg_per_100k)) %>%
  ungroup()

overall_rates %>% slice_max(overall_case_rate)
overall_rates %>% slice_min(overall_case_rate)
```



We see the state with the highest rate per population is Rhode Island, the state with the lowest is Maine. Next, we plot the time series of daily case rate per population of these two states.



```{r}
t1 = covid %>%
  select(date, state, cases_avg_per_100k) %>%
  filter(state == 'Rhode Island' | state == 'Maine')

ggplot(t1, aes(x = date, y = cases_avg_per_100k, color = state)) +
  geom_line(linewidth = 1) +
  labs(
    title = "Daily Case per Population",
    x = "Date",
    y = "Case per 100k Population"
  ) +
  theme_minimal()
```



The difference between these two states is that during the spikes, the state with the highest rate had a much higher rate than the state with the lowest, especially at the beginning of 2022, which was the major spike.

### (c)

The first five states to reach a daily case rate per population greater than 10.



```{r}
first_over_10 = covid %>%
  filter(!is.na(cases_avg_per_100k)) %>%
  group_by(state) %>%
  summarise(first_date_over10 = min(date[cases_avg_per_100k > 10], na.rm = TRUE),
            .groups = "drop") %>%
  arrange(first_date_over10)


head(first_over_10, 5)
```



So the first five are New York, New Jersey, Massachusetts, Connecticut and Louisiana.

